apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "org.michaelbel.buildapp"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "GITHUB_CLIENT_ID", "\"${getProperty("local.properties", "github_client_id")}\""
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    // appcompat
    implementation 'androidx.appcompat:appcompat:1.0.2'
    // browser
    implementation 'androidx.browser:browser:1.0.0'
    implementation 'androidx.customview:customview:1.0.0'
    // design
    implementation 'com.google.android.material:material:1.1.0-alpha01'
    // logging
    implementation 'com.jakewharton.timber:timber:4.7.1'
    // json
    implementation 'com.squareup.moshi:moshi:1.8.0'
    // retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.4.0'
    implementation 'com.squareup.retrofit2:converter-moshi:2.3.0'
    // rxjava2
    implementation 'io.reactivex.rxjava2:rxjava:2.1.15'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    // okhttp
    implementation 'com.squareup.okhttp3:okhttp:3.11.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'
    // glide
    implementation 'com.github.bumptech.glide:glide:4.8.0'

    testImplementation 'junit:junit:4.12'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

def getProperty(String filename, String propName) {
    def propsFile = rootProject.file(filename)
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        if (props[propName] != null) {
            return props[propName]
        } else {
            print("No such property " + propName + " in file " + filename)
        }
    } else {
        print(filename + " does not exist!")
    }
}